<% content_for :title do %>Insertion Sort<% end %>

<h1>Insertion Sort</h1>
<p>Where a bubble sort relies on a number of small swaps, insertion sort relies on inserting a single element in the right for a given iteration. Every iteration through the collection leaves a greater segment sorted.</p>

<h2>Implementation</h2>
<pre id="code1">
function sort(values) {
  <span class="line">var length = values.length;</span>
  <span class="line">for(var i = 1; i &lt; length; ++i) {</span>
    <span class="line">var temp = values[i];</span>
    <span class="line">var j = i - 1;</span>
    <span class="line">for(; j >= 0 &amp;&amp; values[j] > temp; --j) {</span>
      <span class="line">values[j+1] = values[j];</span>
    }
    <span class="line">values[j+1] = temp;</span>
  }</span>
};
<span class="line">sort([7, 4, 5, 2, 9, 1]);</span>
<span class="line">//finished</span>
</pre>

<h2>Example</h2>
<p>Click <em>step</em> to sort the array.</p>
<div id="example1">
  <div class="nodeList">
    <div>7</div>
    <div>4</div>
    <div>5</div>
    <div>2</div>
    <div>9</div>
    <div>1</div>
  </div>
  <div class="step">step</div>
</div>

<h2>Characteristics</h2>
<p>Like bubble sorts, insertion sorts is efficient for an already sorted or nearly sorted collection. Insertion sort will always be at least as efficient as a bubble sort.</p>

<h2>In The Real World</h2>
<p>Insertion sort is a good choice for small or mostly sorted collections. It performs well, has little memory overhead and is simple to understand and implement.</p>

<div id="nav">
  <a href="/sort/bubblesort" id="prev">&laquo; bubble sort</a>
  <a href="/" id="next">home &raquo;</a>
</div>
  
<%= erb :disqus, :locals => {:identifier => '/algo/insertionsort'}%>

<script type="text/javascript">
$(document).ready(function()
{
  var $code1 = $('#code1').code({});
  $('#example1').example({
    code: $code1, 
    instructions: instructions.insertionSort,
    init: instructions.insertionSortInit
  });
});
</script>